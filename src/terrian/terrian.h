#pragma once
#include "common.h"
#include "block.h"

#include "renderer/robject.h"
#include "world/camera.h"

#include <mutex>

class Terrian;

class TerrianRenderObject : public CustomRenderObject
{
public:
	TerrianRenderObject();

	virtual void OnRender(RenderContext ctx) override;

private:
};

class TerrianRenderer : public RenderComponent
{
public:
	TerrianRenderer(const Terrian* terrian);
	
	virtual bool Activated() override;

	virtual bool Initialize(RenderInitContext ctx) override;

	virtual RenderObject* OnRender(MemoryArenaAllocator* allocator) override;

	virtual void Finalize(RenderFinalizeContext ctx) override;

private:
	const Terrian*				m_Terrian;

	//buffer records point primitives to draw generated by compute shader
	ptr<gvk::Buffer>			m_TerrianDrawBuffer[3];
	ptr<gvk::Buffer>			m_TerrianDrawIndirectBuffer[3];
	//buffer stores all the loaded terrian block data
	ptr<gvk::Buffer>			m_TerrianStorageBuffer[3];

	ptr<gvk::Pipeline>			m_TerrianComputePipeline;
	ptr<gvk::Pipeline>			m_TerrianGraphicsPipeline;
	ptr<gvk::RenderPass>		m_TerrianRenderPass;
	ptr<gvk::Image>				m_TerrianAtlas;
	ptr<gvk::DescriptorSet>		m_TerrianGraphicsDescriptorSet;
};

class Terrian 
{
	friend class TerrianRenderer;
public:
	bool Initialize();
	
	//update terrian system every frame in game thread
	void Update();

private:

	void GenerateTerrianChunk(u32 x, u32 y, u32 z);

	std::mutex						m_AccessLock;

	ptr<TerrianChunk>				m_CurrChunks;
	//std::vector<ptr<TerrianChunk>>	m_LoadedChunks;
	ptr<TerrianRenderer>			m_Renderer;
};



